Before:
  call system('touch ~/test.file')

After:
  let g:auto_ticket = 0
  let g:ticket_black_list = []
  call system('rm ~/test.file')


Execute(expect GetBranchName pass):
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  AssertEqual
    \ GetBranchName(),
    \ branchname

Execute(expect g:auto_ticket to autoset to zero):
  AssertEqual
    \ g:auto_ticket,
    \ 0

Execute(expect g:ticket_black_list to autoset to empty list):
  AssertEqual
    \ g:ticket_black_list,
    \ []

Execute(expect CheckFileExists fail):
  AssertThrows
    \ CheckFileExists('/home/nonfile')

Execute(expect CheckFileExists pass):
  AssertEqual
    \ CheckFileExists(expand('~') . '/test.file'),
    \ expand('~') . '/test.file'

Execute(expect CheckIfGitRepo fail):
  :cd /
  AssertThrows
    \ CheckIfGitRepo()
  :cd -

Execute(expect CheckIfGitRepo pass):
  AssertEqual
    \ CheckIfGitRepo(),
    \ 0

Execute(expect GetRepoName fail):
  :cd /
  AssertThrows
    \ GetRepoName()
  :cd -

Execute(expect GetRepoName pass):
  AssertEqual
    \ GetRepoName(),
    \ 'ticket.vim'

Execute(expect GitDirPath pass):
  AssertEqual
    \ GetDirPath(),
    \ '~/.tickets/ticket.vim'

Execute(expect GitDirPath fail):
  :cd /
  AssertThrows
    \ GetDirPath()
  :cd -

Execute(expect GetFilePath session pass):
  AssertEqual
    \ GetFilePath('.vim'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.vim'

Execute(expect GetFilePath markdown pass):
  AssertEqual
    \ GetFilePath('.md'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.md'

Execute(expect GetFilePathOnlyIfExists pass):
  call CreateSession()
  AssertEqual
    \ GetFilePathOnlyIfExists('.vim'),
    \ '~/.tickets/ticket.vim/' . GetBranchName() . '.vim'

Execute(expect GetFilePathOnlyIfExists fail):
  AssertThrows
    \ GetFilePathOnlyIfExists('.py')

Execute(expect CreateSession pass):
  call CreateSession()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . GetBranchName() . '.vim')
    \ )

Execute(expect CreateNote pass):
  call CreateNote()
  Assert
    \ filereadable(
    \   expand('~/.tickets/ticket.vim/' . GetBranchName() . '.md')
    \ )

Execute(expect BranchInBlackList pass):
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  let g:ticket_black_list = [branchname, 'other-branch']
  AssertEqual
    \ BranchInBlackList(),
    \ 1

Execute(expect BranchInBlackList fail):
  AssertEqual
    \ BranchInBlackList(),
    \ 0

Execute(expect DetermineAuto pass):
  let g:auto_ticket = 1
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 1

Execute(expect DetermineAuto fail):
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 0

Execute(expect DetermineAuto fail due to black listed branch):
  let g:auto_ticket = 1
  let branchname = system(
    \ 'git symbolic-ref --short HEAD | tr "/" "\n" | tail -n 1 | tr -d "\n"'
    \ )
  let g:ticket_black_list = [branchname, 'other-branch']
  call CreateSession()
  AssertEqual
    \ DetermineAuto(),
    \ 0

Execute(expect DetermineAuto to pass when session file does not exist):
  let g:auto_ticket = 1
  call system('rm ~/.tickets/ticket.vim/' . GetBranchName() . '.vim')
  AssertEqual
    \ DetermineAuto(),
    \ 1

" TODO: does not work during travis ci but does locally
" I suspect it has something to do with the changing dirs, perhaps
" `cd -` is not being executed

" Execute(expect DetermineAuto fail because not in git repo):
"   :cd /
"   let g:ticket_auto_save = 1
"   AssertEqual
"     \ DetermineAuto(),
"     \ 0
"   :cd - 
